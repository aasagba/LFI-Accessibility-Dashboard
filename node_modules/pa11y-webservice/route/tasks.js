// This file is part of pa11y-webservice.
//
// pa11y-webservice is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pa11y-webservice is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with pa11y-webservice.  If not, see <http://www.gnu.org/licenses/>.

'use strict';

var _ = require('underscore');
var Hapi = require('hapi');

// Routes relating to all tasks
module.exports = function (app) {
	var model = app.model;

	var getResultById = function (task) {
		return new Promise(function(resolve, reject) {
			model.result.getByTaskId(task.id, {}, function (err, results) {

				if (err || !results) {
					task.last_result = null;
				}

				if (results) {
					//console.log("results returned: " + JSON.stringify(results));
					task.last_result = results[0];
				}

				resolve(task);
			});
		});
	};
	return [

		// Get all tasks
		{
			method: 'GET',
			path: '/tasks',
			handler: function (req) {
				//console.log("/tasks");
				model.task.getAll(req.query.client, req.query.skip, req.query.searchTerm, function (err, tasks) {
					//console.log("Tasks in tasks.js: " + tasks.length);

					var clientid = req.query.client;

					if (err || !tasks) {
						return req.reply().code(500);
					}

					if (req.query.lastres) {
						//tasks = tasks.map(getResultById);

						//Promise.all(tasks).then(function (tasks) {
							req.reply(tasks).code(200);
						//})

					} else {
						req.reply(tasks).code(200);
					}
				});
			},
			config: {
				validate: {
					query: {
						lastres: Hapi.types.Boolean(),
						client: Hapi.types.String().required(),
						skip: Hapi.types.Number().required(),
						searchTerm: Hapi.types.String(),
					},
					payload: false
				}
			}
		},

		// Create a task
		{
			method: 'POST',
			path: '/tasks',
			handler: function (req) {
				console.log("/tasks POST");
				model.task.create(req.payload, function (err, task) {
					if (err || !task) {
						return req.reply().code(500);
					}
					req
						.reply(task)
						.header('Location', 'http://' + req.info.host + '/tasks/' + task.id)
						.code(201);
				});
			},
			config: {
				validate: {
					query: {},
					payload: {
						name: Hapi.types.String().required(),
						timeout: Hapi.types.Number().integer(),
						url: Hapi.types.String().required(),
						client: Hapi.types.String().required(),
						username: Hapi.types.String().allow(''),
						password: Hapi.types.String().allow(''),
						standard: Hapi.types.String().required().valid([
							'Section508', 'WCAG2A', 'WCAG2AA', 'WCAG2AAA'
						]),
						ignore: Hapi.types.Array()
					}
				}
			}
		},

		// Get results for all tasks
		{
			method: 'GET',
			path: '/tasks/results',
			handler: function (req) {
				console.log("/tasks/results");
				model.result.getAll(req.query, function (err, results) {
					if (err || !results) {
						return req.reply().code(500);
					}
					req.reply(results).code(200);
				});
			},
			config: {
				validate: {
					query: {
						from: Hapi.types.String().date(),
						to: Hapi.types.String().date(),
						full: Hapi.types.Boolean()
					},
					payload: false
				}
			}
		}

	];
};

